data_to_sort	dcd		34, 23, 22, 8, 50, 74, 2, 1, 17, 40
list_elements	dcd		10
			
main			mov		r9, #-1				; Assigning -1 to r9 because -1 will  be the sentinel value
			ldr		r3, =data_to_sort   	; Load the starting address of the first
										;		of element of the array of numbers into r3
			ldr		r4, =list_elements  	; Address of number of elements in the list
			ldr		r4, [r4]            	; Number of elements in the list
			
			add		r5, r3, #400	 		; Location of first element of linked list - "head pointer"
										;		(note that I assume it is at a "random" location beyond the end of the array.)
			
			;#################################################################################
			;		Include any setup code here prior to loop that loads data elements in array
			;#################################################################################
			
			mov		r10, #0					; Initialize r10 as iterating register for the array
											;		Initialize first element in the doubly linked list:
			str		r9, [r5, #0]				;	- First Address stores the previous list address (-1 is our sentinel)
											;		- Second Address stores the value
			ldr		r2, [r3, r10]				; 		- Load the first value from the array into r2: 'r2 <- data_to_sort[0]'
			str		r2, [r5, #4]				; 		- Store r2 into the list element's second address
			add		r6, r5, #32				; 	- Get address of next element into r6
			str		r6, [r5, #8]				;	- Store next address in 2nd block of the element
			sub		r4, r4, #1					;	- Subtract the number of elements by 1
			
			;#################################################################################
			;		Start a loop here to load elements in the array and add them to a linked list
			;#################################################################################
			
load			cmp		r4, #0
			ble		endLoad
			add		r10, r10, #4
			
			str		r5, [r6]
			
			ldr		r2, [r3, r10]
			str		r2, [r6, #4]
			
			add		r6, r6, #32
			add		r5, r5, #32
			
			str		r6, [r5, #8]
			
			sub		r4, r4, #1
			
			bl		load
			
endLoad		mov		r12, #0x69
			
			
			add		r6, r6, #32         ; every time you create a new struct, add 32 to
			;		starting address of last struct to mimic
			;		non-contiguous memory locations
			;		I assume address of last struct is in r6
			;		you DO NOT need to make this assumption
			
			;#################################################################################
			;		Add insert, swap, delete functions
			;#################################################################################
			
			
			end
